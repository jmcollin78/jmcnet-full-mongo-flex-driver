<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:parsley="http://www.spicefactory.org/parsley">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import commun.Constantes;
			
			import jmcnet.libcommun.logger.JMCNetLog4JLogger;
			import jmcnet.libcommun.logger.JMCNetLogger;
			import jmcnet.mongodb.documents.Cursor;
			import jmcnet.mongodb.documents.JavaScriptCode;
			import jmcnet.mongodb.documents.JavaScriptCodeScoped;
			import jmcnet.mongodb.documents.MongoDocument;
			import jmcnet.mongodb.documents.MongoDocumentDelete;
			import jmcnet.mongodb.documents.MongoDocumentKillCursors;
			import jmcnet.mongodb.documents.MongoDocumentQuery;
			import jmcnet.mongodb.documents.MongoDocumentResponse;
			import jmcnet.mongodb.documents.MongoDocumentUpdate;
			import jmcnet.mongodb.documents.ObjectID;
			import jmcnet.mongodb.driver.EventMongoDB;
			import jmcnet.mongodb.driver.JMCNetMongoDBDriver;
			import jmcnet.mongodb.driver.MongoResponder;
			
			import modele.TestObjectIDVO;
			import modele.TestVO;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			[Inject]
			public var mongoDriver:JMCNetMongoDBDriver;
			
			private static var log:JMCNetLog4JLogger = JMCNetLog4JLogger.getLogger(Main);
			
			private var cursorID:Cursor=new Cursor(0,0);
			private var mapFunctionCode:String = "function() {\n    emit(this.attrString, { total : this.attrInt32, nb : 1 });\n}";
			private var reduceFunctionCode:String = "function (key, emits) {\n    nb=0;\n    total = 0;\n    for (var i in emits) {\n        nb += emits[i].nb;\n        total += emits[i].total;\n    }\n    return {total : total , nb : nb};\n}";
			private var finalizeFunctionCode:String = "function(key, result) {\n    if (result.nb != 0)\n         result.avg = result.total/result.nb;\n    else result.avg = 0;\n    result.scopedVar = myScopedFct();\n    result.init = init++;\n    return result;\n}";
			
			[Init]
			public function onParsleyInit():void {
				trace("Dans onParsleyInit");
				
				// Initialize logs
				JMCNetLogger.setLogEnabled(true, false);
				JMCNetLogger.setLogLevel(JMCNetLogger.DEBUG);

				// Add generic mongoDB listener
				mongoDriver.addEventListener(JMCNetMongoDBDriver.EVT_CONNECTOK, onConnectOK);
				mongoDriver.addEventListener(JMCNetMongoDBDriver.EVT_AUTH_ERROR, onAuthError);
				mongoDriver.addEventListener(JMCNetMongoDBDriver.EVT_CLOSE_CONNECTION, onCloseConnexion);
				mongoDriver.addEventListener(JMCNetMongoDBDriver.EVT_LAST_ERROR, onLastError);
				mongoDriver.addEventListener(JMCNetMongoDBDriver.EVT_RUN_COMMAND, onRunCommand);
				
				// Set safeMode
				mongoDriver.setWriteConcern(JMCNetMongoDBDriver.SAFE_MODE_SAFE);
				
			}
			public function menuMenu():void {
			}
			
			protected function connexionClickHandler(event:MouseEvent):void
			{
				trace("Dans connexionClickHandler");
				console.text += "\n------------------------------------------------------\nDébut de connexion ...";
				if (mongoDriver == null) {
					console.text += "MongoDriver non initialisé !";
				}
				else {
					mongoDriver.connect();
				}
			}
			
			protected function deconnexionClickHandler(event:MouseEvent):void
			{
				console.text += "\n------------------------------------------------------\nDébut de déconnexion ...";
				if (mongoDriver == null) {
					console.text += "MongoDriver non initialisé !";
				}
				else {
					mongoDriver.disconnect();
				}
			}
			
			protected function effacerClickHandler(event:MouseEvent):void
			{
				console.text="";
			}
			
			protected function onConnectOK(event:EventMongoDB):void {
				console.text += " OK";
				if (mongoDriver.isConnecte()) console.text += " Connected";
				else console.text += " Disconnected";
			}
			
			protected function onAuthError(event:EventMongoDB):void {
				console.text += " KO. Authentication NOK.";
				if (mongoDriver.isConnecte()) console.text += " Connected";
				else console.text += " Disconnected";
			}
			
			protected function onConnectKO(event:EventMongoDB):void {
				console.text += " KO";
				try { mongoDriver.getLastError(); } catch (e:Error) { }
			}
			
			protected function onCloseConnexion(event:EventMongoDB):void {
				console.text += " Close";
			}
			
			protected function onLastError(event:EventMongoDB):void {
				log.evt("Reception of getLastError result"); 
				if (event.result != null) {
					onLastErrorCallback(event.result as MongoDocumentResponse, null);
				}
			}
			
			protected function onLastErrorCallback(response:MongoDocumentResponse, token:*):void {
				log.evt("In onLastErrorCallback result : "+response.toString()+" token="+token); 
				if (response.isOk) {
					console.text += "\nonLastError : Résultat OK. Raw message="+response.toString();
				}
				else {
					console.text += "\nonLastError : Résultat KO. ErrorMsg="+response.errorMsg+" raw message="+response.toString();
				}
			}
			
			protected function onRunCommand(event:EventMongoDB):void {
				console.text += "\nRésultat de la commande : "+ObjectUtil.toString(event.result);
			}
			
			protected function ajouterClickHandler(event:MouseEvent):void {
				log.debug("Dans ajouterClickHandler");
				console.text += "\n------------------------------------------------------\nInsertion dans la collection '"+Constantes.documentsCollectionName+"' ...";
									
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [new TestVO("StringValue1",18,253.1234,true), new TestVO("StringOther2",19,254.1234,false)], null, true);
				
				var obj:Object = new Object();
				obj.attr1 = 1;
				obj.attrInt32=22;
				obj._id = null;
				var responder:MongoResponder = new MongoResponder(onLastErrorCallback, null, null);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [obj], responder, true);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, ["une chaine simple"], responder, true);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [new Array("1ere chaine", "2eme chaine")], responder, true);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [new TestObjectIDVO()], responder, true);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [new TestObjectIDVO(ObjectID.createFromString("myObjectIDString"))], responder, true);
				mongoDriver.insertDoc(Constantes.documentsCollectionName, [new MongoDocument("key", "value")]);
			}
			
			protected function creerCollectionClickHandler(event:MouseEvent):void
			{
				trace("Dans creerCollectionClickHandler");
				console.text += "\n------------------------------------------------------\nCréation de la collection '"+Constantes.documentsCollectionName+"' ...";
				mongoDriver.createCollection(Constantes.documentsCollectionName);
			}
			
			protected function renameCollectionClickHandler(event:MouseEvent):void
			{
				trace("Dans renameCollectionClickHandler");
				console.text += "\n------------------------------------------------------\nRename of collection '"+Constantes.documentsCollectionName+"' to newCollectionName (only works with the admin db) ...";
				mongoDriver.renameCollection(Constantes.documentsCollectionName, "newCollectionName");
			}
			
			protected function checkLastErrorCallback(responseDoc:MongoDocumentResponse, token:*):void {
				if (responseDoc != null) {
					if (responseDoc.numberReturned > 0) {
						if (responseDoc.getDocument(0).getValue("ok")) {
							console.text += "OK\nRésultat de la commande : "+responseDoc.toString();
						}
						else {
							console.text += "KO\nErrmsg : "+responseDoc.getDocument(0).getValue("errmsg");
						}
					}
				}
				mongoDriver.getLastError();
			}
			
			protected function supprimerCollection_clickHandler(event:MouseEvent):void
			{
				log.evt("Dans supprimerCollectionClickHandler");
				console.text += "\n------------------------------------------------------\nSuppression de la collection '"+Constantes.documentsCollectionName+"' ...";
				mongoDriver.dropCollection(Constantes.documentsCollectionName);
			}
			
			protected function lister_clickHandler(event:MouseEvent):void
			{
				log.evt("Dans listerClickHandler");
				console.text += "\n------------------------------------------------------\nListage des 10 1ers de la collection '"+Constantes.documentsCollectionName+"' ...";
				
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				var returnFields:MongoDocument = null;
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived), returnFields, 0, 10 );				
			}
			
			protected function listerOrderBy_clickHandler(event:MouseEvent):void
			{
				log.evt("Dans listerOrderByClickHandler");
				console.text += "\n------------------------------------------------------\nListage de la collection orderby attrInt32'"+Constantes.documentsCollectionName+"' ...";
				
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addOrderByCriteria("attrInt32", true);
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived));				
			}
						
			private function onResponseReceived(responseDoc:MongoDocumentResponse, token:*):void {
				log.evt("Reception of a response : "+responseDoc.toString());
				console.text += "\nThe raw response : \n";
				console.text += "\n    responseTo="+responseDoc.header.responseTo;
				console.text += "\n    flags=";
				if (responseDoc.isFlagCursorNotFound()) console.text += "[CursorNotFound]";
				if (responseDoc.isFlagQueryFailure()) console.text += "[QueryFailure]";
				if (responseDoc.isFlagAwaitCapable()) console.text += "[AwaitCapable]";
				cursorID = responseDoc.cursorID;
				console.text += "\n    cursorID="+cursorID;
				console.text += "\n    startingFrom="+responseDoc.startingFrom;
				console.text += "\n    numberReturned="+responseDoc.numberReturned;
				for (var i:int=0; i < responseDoc.numberReturned; i++) {
					console.text += "\n    document["+i+"]="+responseDoc.getDocument(i).toString();
				}
				console.text += "\n\nThe interpreted response : \n";
				for ( i=0; i < responseDoc.interpretedResponse.length; i++) {
					log.debug("responseDoc.interpretedResponse="+responseDoc.interpretedResponse);
					console.text += "\n-----\ndocument["+i+"]="+ObjectUtil.toString(responseDoc.interpretedResponse[i]);
				}
			}
			
			protected function getMore_clickHandler(event:MouseEvent):void	{
				log.evt("Dans getMoreClickHandler");
				console.text += "\n------------------------------------------------------\nMore data of collection '"+Constantes.documentsCollectionName+"' ...";
				
				mongoDriver.getMoreDoc(Constantes.documentsCollectionName, cursorID, new MongoResponder(onResponseReceived), 10);		
			}
			
			protected function update_clickHandler(event:MouseEvent):void
			{
				log.debug("In update_clickHandler ($set root.attrString = newValue, multiUpdate=true)");
				console.text += "\n------------------------------------------------------\nUpdate collection '"+Constantes.documentsCollectionName+"' ($set root.attrString = newValue, multiUpdate=true) ...";
				
				var doc:MongoDocumentUpdate = new MongoDocumentUpdate();
				doc.addUpdateCriteria("$set", new MongoDocument("root.attrString", "newValue"));
				mongoDriver.updateDoc(Constantes.documentsCollectionName, doc, new MongoResponder(onLastErrorCallback), false, true);
				
				log.debug("In update_clickHandler (root.attrInt32=256 where attrInt32=18, multiUpdate=false)");
				console.text += "\n------------------------------------------------------\nUpdate collection '"+Constantes.documentsCollectionName+"' (root.attrInt32=256 where attrInt32=18, multiUpdate=false) ...";
				
				doc = new MongoDocumentUpdate();
				doc.addUpdateCriteria("root.attrInt32", 256);
				doc.addSelectorCriteria("attrInt32", 18);
				mongoDriver.updateDoc(Constantes.documentsCollectionName, doc, new MongoResponder(onLastErrorCallback), false, false);				
			}
			
			protected function delete_clickHandler(event:MouseEvent):void
			{
				log.debug("In delete_clickHandler");
				console.text += "\n------------------------------------------------------\nDelete collection '"+Constantes.documentsCollectionName+"' (root.attrString = newValue) ...";
				
				var doc:MongoDocumentDelete = new MongoDocumentDelete();
				doc.addSelectorCriteria("attrString", "newValue");
				log.debug("First delete in delete_clickHandler");
				mongoDriver.deleteDoc(Constantes.documentsCollectionName, doc, new MongoResponder(onLastErrorCallback), false);
				
				// 2nd way to initialize MongoDocumentDelete ICI 2 delete de suite ca fait planter la socket qui est decalee
				log.debug("2nd delete in delete_clickHandler");
				mongoDriver.deleteDoc(Constantes.documentsCollectionName,
					new MongoDocumentDelete(MongoDocument.or(new MongoDocument("attrString", "newValue"), new MongoDocument("attrString", "otherValue"))),
					new MongoResponder(onLastErrorCallback), true);
			}
			
			protected function killCursor_clickHandler(event:MouseEvent):void
			{
				log.debug("In killCursor_clickHandler");
				console.text += "\n------------------------------------------------------\nKill cursor cursorID="+cursorID;
				
				var doc:MongoDocumentKillCursors = new MongoDocumentKillCursors();
				doc.addCursorID(cursorID);
				mongoDriver.killCursors(doc, new MongoResponder(onLastErrorCallback));
			}
			
			protected function complex_find1_clickHandler(event:MouseEvent):void
			{
				log.debug("In complex_find1_clickHandler");
				console.text += "\n------------------------------------------------------\nComplex find collection '"+Constantes.documentsCollectionName+"' (attrInt32 >= 19 && attrInt32 < 22) ...";
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addQueryCriteria("attrInt32", MongoDocument.gte(19).lt(22));
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived)); 
			}
			
			protected function complex_find2_clickHandler(event:MouseEvent):void
			{
				log.debug("In complex_find2_clickHandler");
				console.text += "\n------------------------------------------------------\nComplex find collection '"+Constantes.documentsCollectionName+"' (attrArray contains all \"arrayStringValue\", false) ...";
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addQueryCriteria("attrArray", MongoDocument.all(new Array("arrayStringValue", false)));
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived)); 
			}
			
			protected function complex_find3_clickHandler(event:MouseEvent):void {
				log.debug("In complex_find3_clickHandler");
				console.text += "\n------------------------------------------------------\nComplex find collection '"+Constantes.documentsCollectionName+"' (attrInt32==18 OR attr1==1) ...";
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addDocumentCriteria(
					MongoDocument.or(
						new MongoDocument("attrInt32", 18),
						new MongoDocument("attr1", 1)));
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived)); 
			}
			
			protected function complex_find4_clickHandler(event:MouseEvent):void {
				log.debug("In complex_find4_clickHandler");
				console.text += "\n------------------------------------------------------\nComplex find collection '"+Constantes.documentsCollectionName+"' ( attrString = ^String.*[12]$) ...";
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addQueryCriteria("attrString", MongoDocument.regex("^string.*[12]$",true, false, false, false));
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived)); 
			}
			
			protected function complex_find5_clickHandler(event:MouseEvent):void {
				log.debug("In complex_find5_clickHandler");
				console.text += "\n------------------------------------------------------\nComplex find collection '"+Constantes.documentsCollectionName+"' ( ! attrInt32 % 2 == 1 and attrInt32 exists) ...";
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				query.addQueryCriteria("attrInt32", MongoDocument.not(MongoDocument.mod(2, 1)).exists(true));
				mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived)); 
			}
			
			protected function aggregation_count_clickHandler(event:MouseEvent):void {
				log.debug("In aggregation_count_clickHandler");
				console.text += "\n------------------------------------------------------\nAggregation count collection '"+Constantes.documentsCollectionName+"' ( attrString = ^String.*[12]$) skip=1, limit=250, snapshot=true, ...";
				var query:MongoDocument = new MongoDocument("attrString", MongoDocument.regex("^string.*[12]$",true, false, false, false));
				mongoDriver.count(Constantes.documentsCollectionName, query, new MongoResponder(onResponseReceived),1,250,true); 
			}
			
			protected function aggregation_distinct_clickHandler(event:MouseEvent):void	{
				log.debug("In aggregation_distinct_clickHandler");
				console.text += "\n------------------------------------------------------\nAggregation distinct collection '"+Constantes.documentsCollectionName+"' ( attrString) ...";
				mongoDriver.distinct(Constantes.documentsCollectionName, "attrString", null, new MongoResponder(onResponseReceived)); 
			}
			
			protected function aggregation_group_clickHandler(event:MouseEvent):void {
				log.debug("In aggregation_group_clickHandler");
				console.text += "\n------------------------------------------------------\nAggregation group collection '"+Constantes.documentsCollectionName+"' ( sum(attrInt32) group by attrString) ...";
				mongoDriver.group(
					Constantes.documentsCollectionName,
					/* new MongoDocument("attrString", 1) */ null,
					new JavaScriptCode("function(obj, result) { result.count += obj.attrInt32; result.nb++; }"),
					new MongoDocument("count", 0).addKeyValuePair("nb",0).addKeyValuePair("avg", 0),
					new MongoResponder(onResponseReceived),
					new JavaScriptCode("function(doc) { return { \"attrString\" : doc.attrString }; }"),
					new MongoDocument("attrString", MongoDocument.exists(true)).addKeyValuePair("attrInt32", MongoDocument.exists(true)),
					new JavaScriptCode("function(result) { if (result.nb > 0) result.avg = result.count/result.nb; }")); 
			}
			
			private var popup:MapReduceWindow = null;
			protected function aggregation_mapReduce1_clickHandler(event:MouseEvent):void {
				log.debug("In aggregation_mapReduce1_clickHandler");
				
				if (popup == null) {
					popup = PopUpManager.createPopUp(this, MapReduceWindow, false) as MapReduceWindow;
					popup.addEventListener(CloseEvent.CLOSE, onClosePopup);
					popup.addEventListener("GoMapReduce", goMapReduce);
					popup.x = 800;
					popup.y = 100;
					
					popup.mapTextArea.text = this.mapFunctionCode;
					popup.reduceTextArea.text = this.reduceFunctionCode;
					popup.finalizeTextArea.text = this.finalizeFunctionCode;
				}
				else {
					onClosePopup(null);
				}
			}
			
			private function onClosePopup(event:Event):void {
				if (popup == null) return ;
				PopUpManager.removePopUp(popup);
				popup = null;
			}
				
			protected function goMapReduce(event:Event):void {
				console.text += "\n------------------------------------------------------\nAggregation mapReduce1 collection '"+Constantes.documentsCollectionName+"' ( sum(attrInt32) group by attrString) ...";
				if (popup == null) {
					console.text += " KO. Popup null\n";
					return ;
				}
				this.mapFunctionCode = popup.mapTextArea.text;
				this.reduceFunctionCode = popup.reduceTextArea.text;
				this.finalizeFunctionCode = popup.finalizeTextArea.text;
				
				mongoDriver.mapReduce(
					Constantes.documentsCollectionName,
					/* map */    new JavaScriptCode(popup.mapTextArea.text),
					/* reduce */ new JavaScriptCode(popup.reduceTextArea.text),
					/* out */ new MongoDocument("inline", 1),
					new MongoResponder(onResponseReceived),
					/* query */ new MongoDocument("attrString", MongoDocument.exists(true)).addKeyValuePair("attrInt32", MongoDocument.exists(true)),
					/* sort */ null,
					/* limit */ 0,
					/* finalize */ popup.finalizeCB.selected ? new JavaScriptCode(popup.finalizeTextArea.text):null,
					/* scope */ new MongoDocument("init", 0).addKeyValuePair("myScopedFct", new JavaScriptCodeScoped("new Date()")),
					/* jsMode */ false,
					/* verbose */ true
				);
			}
			
			private var nbResp:int=0;
			protected function sendManyCommands_clickHandler(event:Event):void {
				log.evt("Dans listerClickHandler");
				console.text += "\n------------------------------------------------------\nListage des 10 1ers de la collection '"+Constantes.documentsCollectionName+"' ...\n";
				
				var query:MongoDocumentQuery = new MongoDocumentQuery();
				var returnFields:MongoDocument = null;
				
				nbResp=0;
				for (var i:int=0; i < 50 ; i++) {
					console.text += "Sending command #"+i+". ";
					mongoDriver.queryDoc(Constantes.documentsCollectionName, query, new MongoResponder(onShortResponseReceived), returnFields, 0, 10 );
				}
			}
			
			private function onShortResponseReceived(responseDoc:MongoDocumentResponse, token:*):void {
				log.evt("Reception of a short response : "+responseDoc.toString());
				console.text += "Here is response #"+nbResp+". ";
				nbResp++;
			}			
		]]>
	</fx:Script>
	<s:HGroup width="100%">
		<s:Button label="Clean console" click="effacerClickHandler(event)"/>
		<s:Button label="Connect" click="connexionClickHandler(event)"/>
		<s:Button label="Disconnect" click="deconnexionClickHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button id="creerCollection" label="Create collection"
				  click="creerCollectionClickHandler(event)"/>
		<s:Button id="renameCollection" label="Rename collection"
				  click="renameCollectionClickHandler(event)"/>
		<s:Button id="supprimerCollection" label="Drop collection"
				  click="supprimerCollection_clickHandler(event)"/>
		<s:Button label="Add" click="ajouterClickHandler(event)"/>
		<s:Button id="list" label="Find" click="lister_clickHandler(event)"/>
		<s:Button id="getMore" label="GetMore" click="getMore_clickHandler(event)"/>
		<s:Button id="orderby" label="Find-Orberby" click="listerOrderBy_clickHandler(event)"/>
		<s:Button id="update" label="Update" click="update_clickHandler(event)"/>
		<s:Button id="delete" label="Delete" click="delete_clickHandler(event)"/>
		<s:Button id="killCursor" label="Kill last Cursor" click="killCursor_clickHandler(event)"/>
		<s:Button id="sendManycommands" label="Send 50 commands" click="sendManyCommands_clickHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button id="complex_find1" label="complex find gte" click="complex_find1_clickHandler(event)"/>
		<s:Button id="complex_find2" label="complex find all" click="complex_find2_clickHandler(event)"/>
		<s:Button id="complex_find3" label="complex find or - nor" click="complex_find3_clickHandler(event)"/>
		<s:Button id="complex_find4" label="complex find regexp" click="complex_find4_clickHandler(event)"/>
		<s:Button id="complex_find5" label="complex find not mod" click="complex_find5_clickHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button id="aggregation_count" label="count regexp" click="aggregation_count_clickHandler(event)"/>
		<s:Button id="aggregation_distinct" label="distinct attrString" click="aggregation_distinct_clickHandler(event)"/>
		<s:Button id="aggregation_group" label="group attrString" click="aggregation_group_clickHandler(event)"/>
		<s:Button id="aggregation_mapreduce1" label="mapReduce1 attrString" click="aggregation_mapReduce1_clickHandler(event)"/>
	</s:HGroup>
	<mx:TextArea id="console" width="100%" height="100%" valueCommit="console.verticalScrollPosition = console.maxVerticalScrollPosition" text="Console output"/>	
</s:Group>

